/*
 * MIT License
 * Copyright (c) 2020 Curt Binder
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package info.curtbinder.arduino.tool;

import java.io.File;

public class RACustomSettings extends RABaseFile {
    private static final String SETTINGS_HEADER = "" +
            "#ifndef __RA_CUSTOMSETTINGS_H__\n" +
            "#define __RA_CUSTOMSETTINGS_H__\n" +
            "\n" +
            "#if defined(ARDUINO_ARCH_SAMD) || defined RA_STAR || defined CLOUD_WIFI\n" +
            "\n" +
            "#include <Ethernet.h>\n";
    private static final String SETTINGS_FOOTER = "" +
            "// Star Board\n" +
            "#define STARPORT	2000 //  internal web server port\n" +
            "\n" +
            "#endif\n" +
            "\n" +
            "#endif  // __RA_CUSTOMSETTINGS_H__\n";

    private static final String CLOUD_LINE_START = "// RA_CLOUD_";
    private static final String LIBRARY_SETTINGS_FOLDER = "/libraries/RA_CustomSettings/";
    private static final String LIBRARY_SETTINGS_FILENAME = "RA_CustomSettings.h";
    private String baseFolder;
    private String sketchFileName;
    private String cloudUsername;
    private String cloudPassword;

    public RACustomSettings() {
        baseFolder = "";
        sketchFileName = "";
    }

    public boolean hasPrerequisites() {
        // Create Settings folder, if non existant
        File dir = new File(getLibraryFolder());
        if (! dir.exists() ) {
            System.out.println("Custom Settings folder doesn't exist, creating it now.\n  --> " + getLibraryFolder());
            dir.mkdir();
        }
        return true;
    }

    public String getFileName() {
        return getLibraryFolder() + LIBRARY_SETTINGS_FILENAME;
    }

    private String getLibraryFolder() {
        return baseFolder + LIBRARY_SETTINGS_FOLDER;
    }

    public void init(String sketchFolder, String sketchFileName) {
        baseFolder = sketchFolder;
        this.sketchFileName = sketchFileName;
    }

    public void loadDefaults() {
        cloudUsername = "cloudtest2";
        cloudPassword = "123456";
    }

    public void process(String code) {
        // Look through the lines of code for the cloud authentication lines
        // Update the values stored
        String[] lines = code.split("\n");
        for (String s : lines) {
            if (s.startsWith(CLOUD_LINE_START)) {
                // Make sure we only look at the label lines
                String[] parts = s.substring(CLOUD_LINE_START.length()).split("=");
                // look up the label
                if (parts.length > 1) {
                    // parts[0] - KEY (label)
                    // parts[1] - value (string to be used)
                    if (parts[0].equals("USERNAME")) {
                        cloudUsername = parts[1];
                        System.out.println("Cloud Username: " + parts[1]);
                    } else if (parts[0].equals("PASSWORD")) {
                        cloudPassword = parts[1];
                        System.out.println("Cloud Password: " + parts[1]);
                    }
                }
            }
        }
    }

    public String generateFile() {
        StringBuilder sb = new StringBuilder();
        sb.append(getAutoGeneratedString(sketchFileName));
        sb.append("\n");
        sb.append(FILE_HEADER);
        sb.append(SETTINGS_HEADER);
        sb.append(generateServerSettings());
        sb.append("\n");
        sb.append(generateCloudWifiSettings());
        sb.append("\n");
        sb.append(generateCloudAuthenticationSettings());
        sb.append("\n");
        sb.append(SETTINGS_FOOTER);

        return sb.toString();
    }

    // TODO fix up to allow for custom portal and mqtt server
    private String generateServerSettings() {
        return  "// Portal & Cloud Server\n" +
                "const IPAddress PortalServer(104,36,18,155); // forum.reefangel.com\n" +
                "static byte MQTTServer[] = {104,36,18,211}; // cloud.reefangel.com\n" +
                "const IPAddress WebWizardServer(162,213,37,72); // webwizard.reefangel.com\n" +
                "#define MQTTPORT 1883 // MQTT server port\n";
    }

    // TODO fix up to allow for setting cloud wifi SSID and password
    private String generateCloudWifiSettings() {
        return  "#if defined(ARDUINO_ARCH_SAMD)\n" +
                "// Cloud Wifi Attachment\n" +
                "// Max number of characters for username and password is 32\n" +
                "static char WIFI_SSID[] = \"testing2\"; //  your network SSID (name)\n" +
                "static char WIFI_PASS[] = \"a01b02c03d\"; // your network password\n" +
                "#endif\n";
    }

    private String generateCloudAuthenticationSettings() {
        return  "// Cloud authentication\n" +
                "// Max number of characters for username and password is 16\n" +
                "static char CLOUD_USERNAME[]  = \"" + cloudUsername + "\"; // your forum username\n" +
                "static char CLOUD_PASSWORD[]  = \"" + cloudPassword + "\"; // your forum password\n";
    }
}
