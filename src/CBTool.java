package info.curtbinder.arduino.tool;

import processing.app.Editor;
import processing.app.BaseNoGui;
import processing.app.SketchFile;
import processing.app.tools.Tool;

import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.util.List;
import java.util.ArrayList;

public class CBTool implements Tool {
	private static final String VERSION = "1.0.0";
	private static final String NAME = "CBTool";
	Editor editor;
	
	public void init(Editor editor) {
		this.editor = editor;
	}
	
	public String getMenuTitle() {
		return "CB Detect Reef Angel Features";
	}
	
	private String getVersionString() {
		return "" + NAME + " v" + VERSION;
	}
	
	public void run() {
		editor.statusNotice("Detecting Features...");
		try {
			System.out.println(getVersionString());
			SketchFile sf = editor.getCurrentTab().getSketchFile();
			System.out.println("Generating Features file from " + sf.getFileName());
			// Simply calling the same function that is called when the Verify/Compile button is pressed
//			editor.handleRun(false, editor.presentHandler, editor.runHandler);
//			System.out.println("Name: " + sf.getPrettyName());
			/*
			if (sf.isModified()) {
				System.out.println("File dirty");
			} else {
				System.out.println("File clean");
			}
			*/
			processFeatures(sf.getProgram(), sf.getFileName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		editor.statusNotice("Features detected. Ready to compile & upload.");
	}
	
	
	private void processFeatures(String code, String sketch_name) {
		DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		LocalDateTime now = LocalDateTime.now();
		String date = df.format(now);
	    int numexp = 0;
	    int nummenu = 0;
	    int dimming = 0;
		System.out.println("Processing " + sketch_name + " on " + date);
		
		String featurefile = "// AutoGenerated file by Arduino (Reef Angel) \n" +
		"// Generated on " + date + " for INO file: " + sketch_name + "\n" +
		"\n" +
		"\n" + 
		"/*\n" + 
		" * Copyright 2020 Reef Angel\n" + 
		" *\n" + 
		" * Licensed under the Apache License, Version 2.0 (the \"License\")\n" + 
		" * you may not use this file except in compliance with the License.\n" + 
		" * You may obtain a copy of the License at\n" + 
		" *\n" + 
		" * http://www.apache.org/licenses/LICENSE-2.0\n" + 
		" *\n" + 
		" * Unless required by applicable law or agreed to in writing, software\n" + 
		" * distributed under the License is distributed on an \"AS IS\" BASIS,\n" + 
		" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" + 
		" * See the License for the specific language governing permissions and\n" + 
		" * limitations under the License.\n" + 
		" */\n" + 
		"\n" + 
		"\n" + 
		"#ifndef __REEFANGEL_FEATURES_H__\n" + 
		"#define __REEFANGEL_FEATURES_H__\n" + 
		"\n" + 
		"\n" +
		"\n" + 
		"#endif  // __REEFANGEL_FEATURES_H__";
	    
		System.out.println("The following features were automatically added:");
		System.out.println("Watchdog Timer");
		System.out.println("Version Menu\n");
		featurefile = AddFeature(featurefile, "WDT");	
		featurefile = AddFeature(featurefile, "VersionMenu");	
		
		System.out.println("The following features were detected:");	

		String[] define = new String[0];
		String[] keyword = new String[0];
		String[] desc = new String[0];
		try
		{
			FileReader fileReader = new FileReader(BaseNoGui.getSketchbookPath() + "/update/feature.txt"); 
			BufferedReader bufferedReader = new BufferedReader(fileReader); 
			List<String> linesdefine = new ArrayList<String>(); 
			List<String> lineskeyword = new ArrayList<String>();
			List<String> linesdesc = new ArrayList<String>();
			String line = null; 
			while ((line = bufferedReader.readLine()) != null) { 
				String[] items = line.split(",");
				if (items.length == 3)
				{
					linesdefine.add(items[0]); 
					lineskeyword.add(items[1]); 
					linesdesc.add(items[2]); 
				}
			} 
			bufferedReader.close(); 
			define = linesdefine.toArray(new String[linesdefine.size()]); 
			keyword = lineskeyword.toArray(new String[lineskeyword.size()]); 
			desc = linesdesc.toArray(new String[linesdesc.size()]); 
		}
		catch (IOException e1) {
			e1.printStackTrace();
		} 	
		for (int a=0; a<define.length ;a++)
		{
		    if (code.indexOf(keyword[a])!= -1)
		    {
		    	if (featurefile.indexOf(define[a]) == -1)
		    	{
			    	System.out.println(desc[a]);
			    	featurefile = AddFeature(featurefile, define[a]);
		    	}
		    }
		}
		
	    if (code.indexOf("Box1_") !=-1 ) numexp = 1;
	    if (code.indexOf("Box2_") !=-1 ) numexp = 2;
	    if (code.indexOf("Box3_") !=-1 ) numexp = 3;
	    if (code.indexOf("Box4_") !=-1 ) numexp = 4;
	    if (code.indexOf("Box5_") !=-1 ) numexp = 5;
	    if (code.indexOf("Box6_") !=-1 ) numexp = 6;
	    if (code.indexOf("Box7_") !=-1 ) numexp = 7;
	    if (code.indexOf("Box8_") !=-1 ) numexp = 8;
	    if (numexp != 0)
	    {
	    	System.out.println("Number of Relay Expansion Modules: " + numexp);
	    	featurefile = AddFeature(featurefile, "InstalledRelayExpansionModules " + numexp);

	    }

	    if (code.indexOf("MenuEntry1") != -1) nummenu = 1;
	    if (code.indexOf("MenuEntry2") != -1) nummenu = 2;
	    if (code.indexOf("MenuEntry3") != -1) nummenu = 3;
	    if (code.indexOf("MenuEntry4") != -1) nummenu = 4;
	    if (code.indexOf("MenuEntry5") != -1) nummenu = 5;
	    if (code.indexOf("MenuEntry6") != -1) nummenu = 6;
	    if (code.indexOf("MenuEntry7") != -1) nummenu = 7;
	    if (code.indexOf("MenuEntry8") != -1) nummenu = 8;
	    if (code.indexOf("MenuEntry9") != -1) nummenu = 9;
	    if (nummenu != 0) 
	    {
	    	System.out.println("Number of Menu Options: " + nummenu);
	    	featurefile = AddFeature(featurefile, "CUSTOM_MENU_ENTRIES " + nummenu);
	    }    
	    else
	    {
	        if (code.indexOf("ReefAngel.AddStandardMenu") != -1)
	        {
	        	System.out.println("Standard Menu");
	        	featurefile = AddFeature(featurefile, "WavemakerSetup");        	
	        	featurefile = AddFeature(featurefile, "ATOSetup");        	
	        	featurefile = AddFeature(featurefile, "OverheatSetup");        	
	        	featurefile = AddFeature(featurefile, "StandardLightSetup");        	
	        }
	        else
	        {
		        System.out.println("Simple Menu");
		    	featurefile = AddFeature(featurefile, "SIMPLE_MENU");
	        }
	    }	    

		try {
			BaseNoGui.saveFile(featurefile, new File(BaseNoGui.getSketchbookFolder() + "/libraries/ReefAngel_Features/ReefAngel_Features.h"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private String AddFeature(String featurefile, String feature) {
		if (featurefile.indexOf(feature) == -1)
		{
			featurefile = featurefile.substring(0, featurefile.indexOf("#define __REEFANGEL_FEATURES_H__")+34) + "#define " + feature + "\n" + featurefile.substring(featurefile.indexOf("#define __REEFANGEL_FEATURES_H__")+34); 
		}
		return featurefile;
	}
	  
}